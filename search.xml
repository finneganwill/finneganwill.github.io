<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/12/HelloWorld/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<img src="/2022/03/12/HelloWorld/hello-world.png" class="" title="hello-world"> 

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>HelloWorld</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo&amp;Github搭建个人静态博客（Win）</title>
    <url>/2022/03/13/Hexo&amp;Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h1 id="1-什么是静态博客？"><a href="#1-什么是静态博客？" class="headerlink" title="1. 什么是静态博客？"></a>1. 什么是静态博客？</h1><p>所谓静态博客就是通过生成工具（例如Hexo；Halo等），直接将作者所书写的博文编译成最终的 html；css；js 等静态文件。作者/博主只需将生成的文件部署在服务器 面即可被在互联网中访问。 其他用户通过浏览器访问服务器就会浏览到博客啦。</p>
<h1 id="2-安装教程"><a href="#2-安装教程" class="headerlink" title="2. 安装教程"></a>2. 安装教程</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>下载：<a href="https://nodejs.org/">Node.js 官网</a> | <a href="http://nodejs.cn/">Node.js 中文网</a> </p>
<p>安装：<a href="">我的安装教程</a> | <a href="http://nodejs.cn/learn">官方文档</a>  </p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>下载：<a href="https://git-scm.com/">Git 官网</a> </p>
<p>安装：<a href="">我的安装教程</a> </p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>首先你需要有一个账号，关于Github账号的创建这里就不再赘述了。</p>
<h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><ol>
<li><p>创建仓库时需要注意，仓库名的格式必须是：<code>用户名.github.io</code>。其他选项可根据需要自行设置。</p>
<blockquote>
<img src="/2022/03/13/Hexo&Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20220316104424889.png" class="" title="image-20220316104424889">
</blockquote>
</li>
<li><p>创建好仓库后，就可以使用地址访问了</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://用户名.github.io</span><br></pre></td></tr></table></figure>

<p>或者在你的仓库中进入Settings，在网页最下面Github Pages，点击进入就可以看到你的站点信息了。</p>
<blockquote>
<img src="/2022/03/13/Hexo&Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20220316105310854.png" class="" title="image-20220316105310854"> 
</blockquote>
<blockquote>
<img src="/2022/03/13/Hexo&Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20220316105332704.png" class="" title="image-20220316105332704">
</blockquote>
<blockquote>
<img src="/2022/03/13/Hexo&Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20220316105439070.png" class="" title="image-20220316105439070">  </blockquote>
</li>
</ol>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>本地环境与远程仓库准备好后就可以来安装和使用Hexo了，无论是安装还是后面的写作与部署可以参考<a href="https://hexo.io/zh-cn/docs/">官方文档</a> </p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol>
<li><p>打开命令行窗口，在命令行中使用npm安装Hexo：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol>
<li><p>选择一个目录用来保存网站资源，比如这里在桌面准备了一个 Blog 目录：</p>
<blockquote>
<img src="/2022/03/13/Hexo&Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20220314211133967.png" class="" title="image-20220314211133967"> </blockquote>
</li>
<li><p>使用Git Bash进入该目录（在该目录下<code>右键 -&gt; Git Bash Here</code> 或者 <code>打开Git Bash Here使用命令进入指定目录</code> ）：</p>
<blockquote>
<img src="/2022/03/13/Hexo&Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20220314211306592.png" class="" title="image-20220314211306592"> </blockquote>
</li>
<li><p>Git Bash中执行初始化命令可以生成站点所需要的的文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化站点文件</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm安装</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li><p>生成网页文件，Git Bash输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
<li><p>启动本地站点服务，Git Bash输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li><p>预览，浏览器地址栏输入：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:4000</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="/2022/03/13/Hexo&Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20220316102402450.png" class="" title="image-20220316102402450"> </blockquote>
</li>
</ol>
<h1 id="3-简单使用"><a href="#3-简单使用" class="headerlink" title="3. 简单使用"></a>3. 简单使用</h1><p>搭建好Hexo就可以编写自己的博客了，Hexo默认创建的是markdown格式的文件；</p>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><ol>
<li><p>在Blog目录下启动Git Bash，并执行下面的命令会新建 <code>.md</code> 文件，默认（post布局）会存储在<code>source/_posts</code> 目录下，然后可以使用编写Markdown的软件编写你的文档了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建文档</span></span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># layout选项</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">post - 默认</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">page</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">draft</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写好文档后就可以生成网页文件以及预览了（见 <a href="#%E6%B5%8B%E8%AF%95">测试</a> ）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成网页文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动本地服务预览</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器输入查看效果</span></span><br><span class="line">localhost:4000</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>生成网页文件后，除了本地预览，还可以部署到你的站点了</p>
<ol>
<li><p>安装git推送插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li><p>修改全局配置文件<code>_config.yml</code> </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在配置文件中找到deploy参数，并将参数值设为如下：</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>其中<code>repository</code> 值可以到Github博客仓库中复制：</p>
<blockquote>
<img src="/2022/03/13/Hexo&Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20220316210812099.png" class="" title="image-20220316210812099"> </blockquote>
</li>
<li><p>推送文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>更换主题可以到 <a href="https://hexo.io/themes/">Hexo主题站</a> 浏览下载，关于主题的安装可参考主题文档（一般Github主题项目中都会有介绍），有时间的话我会再写一篇关于主题更换的博客。</p>
<h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档 - 中文</a> </p>
<h2 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化</span></span><br><span class="line">hexo init </span><br><span class="line">npm install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装推送插件</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 新建文档 &amp; 草稿publish &amp; 生成网页文件 &amp; 本地预览 &amp; 推送文章</span></span></span><br><span class="line">hexo new &lt;title&gt; </span><br><span class="line">hexo publish &lt;title&gt;</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li>Github服务器位于国外，在国内访问速度受限，博客部署 <code>hexo d</code> 的时候经常会失败，这种情况就多部署几次直至成功就可以了。</li>
<li>如果嫌弃访问速度过慢可以用Gitee替换Github（搭建步骤基本一致）或者自行加速。</li>
<li>部署后站点内容可能不会立即刷新，稍等一会重新进入就可以了。</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java对象拷贝.md</title>
    <url>/2022/04/26/Java%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h1 id="1-Java中创建对象的5种方式"><a href="#1-Java中创建对象的5种方式" class="headerlink" title="1. Java中创建对象的5种方式"></a>1. Java中创建对象的5种方式</h1><h2 id="1-1-new"><a href="#1-1-new" class="headerlink" title="1.1 new"></a>1.1 new</h2><p><code>new</code> 关键字创建对象是最常规的一种方法，可以通过调用有参或无参的构造方法实现对象的创建，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure>

<h2 id="1-2-clazz-newInstance"><a href="#1-2-clazz-newInstance" class="headerlink" title="1.2 clazz.newInstance()"></a>1.2 clazz.newInstance()</h2><p>通过 <code>Class</code> 类的API实现创建对象，是一种反射方式。这种方式调用的是 public 无参构造，因此<strong>类必须具有公有的无参构造</strong>，否则会报错。</p>
<blockquote>
<p>这种方式在 Java 9 之后已经不推荐使用了：</p>
<img src="/2022/04/26/Java%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/%E5%BC%83%E7%94%A8.png" class="" title="image-20220426113812098">  
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> Student.class.newInstance(); <span class="comment">// 方式一</span></span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student) Class.forName(<span class="string">&quot;my.finn.Student&quot;</span>).newInstance(); <span class="comment">// 方式二</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-constructor-newInstance"><a href="#1-3-constructor-newInstance" class="headerlink" title="1.3 constructor.newInstance()"></a>1.3 constructor.newInstance()</h2><p> java.lang.reflect.Constructor 类中也有一个 newInstance() 方法可以创建对象，和上一个方法一样，也是一种反射方式。通过这个方法<strong>可以调用无/有参和公/私有的构造方法</strong>。</p>
<blockquote>
<p>实际上 clazz.newInstance() 内部仍然是调用的 constructor.newInstance()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] declaredConstructors = Student.class.getDeclaredConstructors(); <span class="comment">// 获取所有构造方法</span></span><br><span class="line"></span><br><span class="line">Constructor&lt;?&gt;[] publicConstructors = Student.class.getConstructors(); <span class="comment">// 获取public的构造方法</span></span><br><span class="line"></span><br><span class="line">Constructor&lt;?&gt; constructor = declaredConstructors[<span class="number">0</span>]; <span class="comment">// 从数组中获取要使用的构造方法</span></span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)constructor.newInstance(); <span class="comment">// 创建对象，newInstance中需要填入相应构造方法的参数</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-Clone"><a href="#1-4-Clone" class="headerlink" title="1.4 Clone"></a>1.4 Clone</h2><p>Object类中提供了一个 native 的 clone() 方法，A.clone() 会创建一个内容和对象 A 相同的对象，使用该方式<strong>不会调用构造方法</strong>。</p>
<blockquote>
<p>protected native Object clone() throws CloneNotSupportedException;</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> s1.clone();</span><br></pre></td></tr></table></figure>

<h2 id="1-5-反序列化"><a href="#1-5-反序列化" class="headerlink" title="1.5 反序列化"></a>1.5 反序列化</h2><p>反序列化是把磁盘文件中的对象数据或者把网络节点上的对象数据，恢复成Java对象模型的过程，反序列化<strong>不会调用任何构造函数</strong>。</p>
<h1 id="2-对象拷贝"><a href="#2-对象拷贝" class="headerlink" title="2. 对象拷贝"></a>2. 对象拷贝</h1><h2 id="2-1-引用拷贝"><a href="#2-1-引用拷贝" class="headerlink" title="2.1 引用拷贝"></a>2.1 引用拷贝</h2><p><strong>引用拷贝：创建一个引用，该引用与原引用都指向同一个对象。</strong> </p>
<img src="/2022/04/26/Java%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D.png" class="" title="引用拷贝"> 

<h2 id="2-2-浅拷贝"><a href="#2-2-浅拷贝" class="headerlink" title="2.2 浅拷贝"></a>2.2 浅拷贝</h2><p><strong>浅拷贝：创建一个引用，并对对象进行拷贝，将创建的引用指向拷贝对象，拷贝时：</strong></p>
<ul>
<li><strong>基本数据类型的字段进行值复制</strong> </li>
<li><strong>引用类型的字段复制一份引用并指向原引用所指向的对象</strong> </li>
</ul>
<img src="/2022/04/26/Java%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/%E6%B5%85%E6%8B%B7%E8%B4%9D.png" class="" title="浅拷贝"> 

<h2 id="2-3-深拷贝"><a href="#2-3-深拷贝" class="headerlink" title="2.3 深拷贝"></a>2.3 深拷贝</h2><p><strong>深拷贝：创建一个引用，并对对象进行拷贝，将创建的引用指向拷贝对象，拷贝时：</strong></p>
<ul>
<li><strong>基本数据类型的字段进行值复制</strong> </li>
<li><strong>引用类型的字段将引用和引用的对象都复制一份，并将拷贝引用指向拷贝对象</strong> </li>
</ul>
<blockquote>
<p>实现深拷贝的方法：</p>
<ul>
<li>反序列化</li>
<li>重写clone()方法时把属性拷贝</li>
</ul>
</blockquote>
<img src="/2022/04/26/Java%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/%E6%B7%B1%E6%8B%B7%E8%B4%9D.png" class="" title="深拷贝"> 

<h1 id="3-示例"><a href="#3-示例" class="headerlink" title="3 示例"></a>3 示例</h1><h2 id="Person-class"><a href="#Person-class" class="headerlink" title="Person.class"></a>Person.class</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//省略setter/getter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123; <span class="comment">//实现Cloneable接口中的clone()方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone(); <span class="comment">//默认浅拷贝</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">(<span class="type">boolean</span> b)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123; <span class="comment">// 深拷贝(为了方便测试这里就直接重载)</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) <span class="built_in">this</span>.clone();</span><br><span class="line">        p.address = (Address) <span class="built_in">this</span>.address.clone();</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Address-class"><a href="#Address-class" class="headerlink" title="Address.class"></a>Address.class</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略setter/getter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Main-class"><a href="#Main-class" class="headerlink" title="Main.class"></a>Main.class</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;China&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Finn&quot;</span>, <span class="number">18</span>, address);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">clonedPerson</span> <span class="operator">=</span> person; <span class="comment">// 引用拷贝</span></span><br><span class="line">        System.out.println(<span class="string">&quot;**************** 引用拷贝 ****************&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(clonedPerson);</span><br><span class="line">        System.out.println(person.getAddress());</span><br><span class="line">        System.out.println(clonedPerson.getAddress());</span><br><span class="line"></span><br><span class="line">        clonedPerson = (Person) person.clone(); <span class="comment">// 浅拷贝</span></span><br><span class="line">        System.out.println(<span class="string">&quot;**************** 浅拷贝 ****************&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(clonedPerson);</span><br><span class="line">        System.out.println(person.getAddress());</span><br><span class="line">        System.out.println(clonedPerson.getAddress());</span><br><span class="line"></span><br><span class="line">        clonedPerson = (Person) person.clone(<span class="literal">true</span>); <span class="comment">// 深拷贝</span></span><br><span class="line">        System.out.println(<span class="string">&quot;**************** 深拷贝 ****************&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(clonedPerson);</span><br><span class="line">        System.out.println(person.getAddress());</span><br><span class="line">        System.out.println(clonedPerson.getAddress());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Print"><a href="#Print" class="headerlink" title="Print"></a>Print</h2><img src="/2022/04/26/Java%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/%E6%8B%B7%E8%B4%9D%E6%89%93%E5%8D%B0%E7%A4%BA%E4%BE%8B.png" class="" title="拷贝打印示例"> 

<h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><ol>
<li><p>java中创建对象的几种方式</p>
<blockquote>
<ul>
<li>new</li>
<li>clazz.newInstance(); // java 9 开始弃用</li>
<li>constructor.newInstance();</li>
<li>obj.clone(); // 默认浅拷贝</li>
<li>deseriallization </li>
</ul>
</blockquote>
</li>
<li><p>拷贝</p>
<blockquote>
<ul>
<li>引用拷贝：创建一个引用指向原对象</li>
<li>浅拷贝：基本类型进行值复制；引用类型只复制引用，不复制引用的对象；clone()方法默认采用浅拷贝实现</li>
<li>深拷贝：基本类型进行值复制；引用类型既复制引用，也复制引用的对象</li>
</ul>
</blockquote>
</li>
<li><p>实现深拷贝</p>
<blockquote>
<ul>
<li>序列化与反序列化</li>
<li>重写clone()方法时把属性也拷贝</li>
</ul>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
        <category>OOP</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>深浅拷贝</tag>
      </tags>
  </entry>
</search>
